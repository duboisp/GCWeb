

/*
Build scrip that

* Create and organize Jekyll template
* Create and generate GCWeb build
* Create the GCWeb website



Component -> Related to the content area / main area

site-layouts -> Related to the whole site container (core template, baseline color + style..., commons/global utility)


Create a function to convert .hbs into .md

*/

// 1. copy defaults layout into _layout

Keep the website file at the same place, instead generate the jekyll template and the asset around it.


+++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++

Core folder


* components: Content area, aka main
* site: Scope whole site and baseline template
* template: Component arrangment and/or special style for specialized content



Reserved keyword

If folder name -> All subs items is about this item
If filename extension -> That current item is this item

If none -> That is product name or a category


Name must be uniques across the whole repos for that type of file.

Folder | name

* **/layout | layout-*.html: Jekyll template HTML file which would be copied over "_layouts" folder.
* **/scss | *.scss: SASS file

	* base.scss -> General include
	* print.scss - > Print CSS
	* screen -> Screen media query
	* min-max...scss -> View port

* **/css | &.css: CSS file
* **/data | *-data.csv | *-data.json | *-data.json-ld :Data file to be copied over "data"

* **/demos | -demo.hbs | demo.html | *.md
	* **/demos/*.js | **/*-demos.js"js" are demos js file in demos folder are excluded from "concatenating"
* **/docs | -docs.hbs | {lang}-docs.hbs

* **/includes/*.html | **/include-*.html : File to copy over "include folder"
* **/inc/*.html | **/*-inc/*.html | inc-*.html : File to copy over "include folder"

* **/tests : Folder containing test case
	* **/tests/**/*.js -> JS test
	* **/tests/**/*.html -> HTML test file, example - bug-1234.html

* **/reports : Not a demos but work similar and it is for reporting.

* assets : Supporting files, file inside are keep as is.

* helpers: Component that is render at the ends
* baseline: Start to include this first -> Usually this are override or about core HTML element
* utilities: Tools or common CSS/JS to support the development of the component. To be render after baseline.


Sequencing of overwritting
- baseline - Overwrite of pre-existing component, like wet-boew
- utilities - Not overrides, but required for good standing of components. (Was named "default" before)
- Any folder name - Components in this theme
	- Component can have dependencies, that will dictate the order, and then it's the file name
- helpers - Set of tools/JS/CSS to help to fix components if issues




A component can have a state like
- config.json-ld | config.yml

	- state: obselete | provisional | undefined (means stable)
	- type: stateless | interative




	1 - layout
	2 - include
	3 - scss

SCSS / JS - Priority order
 1  - sites - baseline
 2  - components - baseline
 3  - template - baseline
 4  - sites - utilities
 5  - sites - {{any}}
 6  - components - utilities
 7  - components - {{any}}
 8  - components - helpers
 9  - template - utilities
 10 - template - {{any}}
 11 - template - helpers
 12 - sites - helpers


// Create a Grunt task that would override those CSS include
// Separate site with component priorities


- layout
- -inc




Jekyll SASS

- Probably only use it to create the independant CSS file for the mélimélo.
- Using this feature for theme.css require to include bootstrap scss files and wet-boew scss files from node_modules


Multilingual,

The issue is the _data folder in the remote theme and the _config.yml is not available to website using a jekyll remote theme. The _data folder and _config.yml are used at the discretion of the immediate website.



* /sites/includes/i18n.html
* _include/i18n.html

* /sites/breadcrumbs/inc-breadcrumbs.html
* _include/breadcrumbs/inc-breadcrumbs.html

* /sites/headers-includes/header.html
* _include/headers-includes/header.html


+++++

Les sites web qui implementera ce theme devra soumettre un empty commit afin de re-builder le jeckyll theme.

Either:
* stackoverflow.com -> 24098792 contains a github action that Trigger GitHub pages rebuild
* git commit --allow-empty -m "Force rebuild of site"
* curl -u yourname:yourtoken -X POST https://api.github.com/repos/yourname/yourrepo/pages/builds
* curl -u githubUserName:0000000000000000 -X POST https://api.github.com/repos/duboisp/jekyll-website/pages/builds




https://github.com/jekyll/jekyll/issues/244


Near to the end, we will need to generate the jekyll theme in it's own folder and deploy that.
Keep the "_include" for the local site includes
Create a build script that combine both and update the .gitignore (may be local to _include folder) to ensure it's dont' include those build files
For example, the {% include alert-provisional.html siteroot="../" %} will be moved in that _include folder, instead of being in the sites/includes folders


+++++++++++++++++++


Packages....

- Build a production ready files - grunt dist
- Build quickly a dev env files - grunt OR grunt debug
- Run test -> grunt debug + grunt test

Special build: Use remote files but in debug -> grunt remote ||| But this is the default, Use local file (grunt local => Will change path for local)


Production/Test

- Jekyll template (Remote JS and CSS files)
- Dist minified + validated (GCWeb bin + wetboew bin + mélimélo bin)
- GCWeb website
- Méli-mélo compiled website
	- Those pages need to use the remotes/compiled JS and CSS. in other word, the dist previously minified
- Self-Update local GCWeb Jekyll + local wet-boew Demos files + compiled _data files
	- Like when we know that WET has been updated

Local/Developpement

- Jekyll template (Remote JS and CSS files)
- Jekyll template (Local JS and CSS files)
- Dist minified + validated
- DEBUG Dist un-minified took as is (Just concat of JS + SASS to CSS)
	- May be just copy the unmified file and change the suffix for "min.js". That way to URL to change
- Méli-mélo compiled file + local website
- Update wet-boew demos
- Update compiled _data files


Deployment (Merge commit -> To master branch; Tag created -> To master branch + new tag
	Trigger: Merged in GCWeb master OR Tag created in GCWeb

- Jekyll template site - On wet-boew/gcweb-jekyll
	- Only _include + _layout
	- commit and push
- Distribution file - On wet-boew/theme-dist -> GCWeb branch
	- Folder "Dist" only
	- Clone also in wet-boew/theme-cdn
- Méli-mélo compiled website - On wet-boew/gcweb-demos-mélimélo
	- Those pages need to use the remotes/compiled JS and CSS

Deployment - Jekyll template change
- Regenerate and update local Jekyll template
- Need to run only when include or layout was modified

Deployment - WET-BOEW demos
- Regenerate and updated local wet-boew demos sub webiste
- Need to run only when wet-boew upstream version has been changed. Dependency has changed




Web content to update == Modify wet-boew/theme-dist repos where:
* index-{en,fr}.html is redirected to GCWeb pages
* index.html is redirected to GCWeb pages
* provisional.html is redirected to corresponding GCWeb pages
* fieldflow{en-fr}.html main page is redirected to corresponding GCWeb pages

++++++++++++


Keep compiled web content in it's own repository, but runable locally
* for: wet-boew-demos
* for: méli-mélo compiled demos
- Those use the remote gcweb-jekyll theme

Website + jekyll source code
- GCWeb

Jekyll website
- ~jekyll-dist

GCWeb dist
- theme-dist:gcweb

Trying: Use multiple include folder with config.yml
But it won't work for _layout
May be, copy all into ~jekyll compiled folder, and then copy the root _includes and root _layout into those folder. Then configure the local server to use a modified version of the config.yml where we add link to our own custom Folder???
- This solution, I need to compile a variant version of the config.yml

docker build -t jekyll-with-env-options .
docker run -it --rm -v "$PWD":/usr/src/app -p "4000:4000" --env JEKYLL_OPTIONS="--includes_dir ~jekyll-dist/_includes --layouts_dir ~jekyll-dist/_layouts"

docker run -it --rm -v ./:/usr/src/app -p "4000:4000" --env JEKYLL_OPTIONS='\--includes_dir ~jekyll-dist/_includes \--layouts_dir ~jekyll-dist/_layouts' jekyll-with-env-options

docker run -it --rm -v "$PWD":/usr/src/app -p "4000:4000" --env JEKYLL_OPTIONS='\--includes_dir ~jekyll-dist/_includes \--layouts_dir ~jekyll-dist/_layouts' jekyll-with-env-options


docker run -it --rm -v "$PWD":/usr/src/app -p "4000:4000" --env JEKYLL_OPTIONS='--config _config.yml,_localJekyll.yml' jekyll-with-env-options

++++++++++++++++++++++++
++++++++++++++++++++++++
++++++++++++++++++++++++

tmp-core-dist-DEBUG
tmp-core-dist-PROD

grunt dist
-> Build Production ready files (min)

* Core files - dist
	+ GCWeb (js + css)
	+ wet-bew (js + css)
	+ méli-mélo (js + css)

* Jekyll theme - ~jekyll-dist
	+ _includes
	+ _layouts

* Content files
	+ _wetboew-demos
	+ méli-mélo-demos
	+ _data/méli-mélo.json

-> Uglify + Post CSS


grunt || grunt debug
-> Build development files (unmin)

* Core files
* Jekyll theme
	- Override settings
* Content files

++++++

Task

grunt || grunt debug
-> It build a fully functional local version of GCWeb

grunt dist
-> Produce the production files that use remote URL, not local

grunt méli-mélo
-> Build méli-mélo package locally for local testing.

++++++++++++++++++++

Deployment variable

ENV github username
ENV github email
ENV commit message - Jekyll Theme
ENV github repository - Jekyll Theme
SECRETS github token

++++++

Theme dist are missing the following 4 files
* License fr
* License en
* payload.json
* package.json

Create TAG when tag is deployed.

